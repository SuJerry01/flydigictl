package config

import "github.com/pipe01/flydigi-linux/pkg/utils"

var ledUnits = [][][][]byte{
	{
		{
			{50, 50, 0},
			{0, 100, 0},
			{0, 50, 50},
			{0, 0, 100},
			{50, 0, 50},
			{100, 0, 0},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
		},
		{
			{24, 76, 0},
			{0, 76, 24},
			{0, 0, 100},
			{24, 0, 76},
			{76, 0, 24},
			{76, 24, 0},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
		},
		{
			{0, 100, 0},
			{0, 50, 50},
			{0, 50, 50},
			{50, 0, 50},
			{100, 0, 0},
			{50, 50, 0},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
		},
		{
			{100, 0, 0},
			{50, 50, 0},
			{0, 100, 0},
			{0, 50, 50},
			{0, 0, 100},
			{50, 0, 50},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
		},
		{
			{76, 24, 0},
			{24, 76, 0},
			{0, 76, 24},
			{0, 76, 24},
			{24, 0, 76},
			{76, 0, 24},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
			{0, 116, 255},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
	},
	{
		{
			{100, 0, 0},
			{0, 0, 0},
			{0, 100, 0},
			{0, 0, 0},
			{0, 50, 50},
			{0, 0, 0},
			{0, 0, 100},
			{0, 0, 0},
			{50, 0, 50},
			{0, 0, 0},
		},
		{
			{80, 0, 0},
			{0, 0, 0},
			{0, 80, 0},
			{0, 0, 0},
			{0, 40, 40},
			{0, 0, 0},
			{0, 0, 80},
			{0, 0, 0},
			{40, 0, 40},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{80, 0, 0},
			{0, 0, 0},
			{0, 80, 0},
			{0, 0, 0},
			{0, 40, 40},
			{0, 0, 0},
			{0, 0, 80},
			{0, 0, 0},
			{40, 0, 40},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
	},
	{
		{
			{100, 0, 0},
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{100, 0, 0},
			{0, 0, 100},
			{0, 0, 100},
			{0, 0, 100},
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{100, 0, 0},
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{100, 0, 0},
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{100, 0, 0},
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
	},
	{
		{
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 80},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 80},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
	},
	{
		{
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 100},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
	},
	{
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
		{
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0},
		},
	},
}

func getLedGroupList(modeId, ledNum int) []*LedGroup {
	groups := make([]*LedGroup, 0)

	for i := 0; i < 16; i++ {
		if i < ledNum {
			for j := 0; j < 10; j++ {
				groups = append(groups, &LedGroup{
					Units: []*LedUnit{
						{
							R: ledUnits[modeId][i][j][0],
							G: ledUnits[modeId][i][j][1],
							B: ledUnits[modeId][i][j][2],
						},
					},
				})
			}
		} else {
			groups = append(groups, &LedGroup{
				Units: utils.RepeatFunc(func() *LedUnit {
					return &LedUnit{0, 0, 0}
				}, 10),
			})
		}
	}

	return groups
}
